<?xml version="1.0" encoding="UTF-8"?>
<stateMachine:Diagram xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:stateMachine="http://stateMachine">
  <describes name="RoboStateChckers">
    <variables name="CheckersNavigator navigator " type="static" initialValue=" SimpleNavigator.getInstance()"/>
    <variables name="ColorSensor CS " type="static" initialValue=" new ColorSensor(SensorPort.S1)"/>
    <variables name="board" type="Board" modifier="private static" initialValue="new Board();"/>
    <variables name="int pieceRobot" type="static" initialValue="CheckersConstants.WHITE;"/>
    <variables name="int piecehuman" type="static" initialValue="CheckersConstants.BLACK;"/>
    <variables name="colore" type="int" modifier="private static " initialValue="CS.getColorNumber();"/>
    <variables name="boolean searchFrom " type="static" initialValue=" true;"/>
    <variables name="boolean searchTo " type="static" initialValue=" false;"/>
    <variables name="from" type="Square" modifier="private static" initialValue="null;"/>
    <variables name="to" type="Square[]" modifier="private static" initialValue="null;"/>
    <variables name="arm" type="ArmController" initialValue="ArmController.getInstance();"/>
    <variables name="boolean humanWin " type="static" initialValue=" false;"/>
    <variables name="boolean robotWin " type="static" initialValue=" false;"/>
    <variables name="int depth " type="final" initialValue=" 3 ;"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="colore==CheckersConstants.BLACK &amp;&amp; searchFrom==true" implicitTransitionsFrom="//@describes/@states.8" implicitTransitionTo="//@describes/@states.4"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="colore==CheckersConstants.WHITE &amp;&amp; searchFrom==true" implicitTransitionsFrom="//@describes/@states.8" implicitTransitionTo="//@describes/@states.13"/>
    <events xsi:type="stateMachine:NamedEvent" trigger="false;//Insert java condition here" name="HumanMoved" transitionTo="//@describes/@states.12"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" implicitTransitionsFrom="//@describes/@states.5" implicitTransitionTo="//@describes/@states.8"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" implicitTransitionsFrom="//@describes/@states.4" implicitTransitionTo="//@describes/@states.8"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="colore==CheckersConstants.BLACK &amp;&amp; searchTo==true" implicitTransitionsFrom="//@describes/@states.8" implicitTransitionTo="//@describes/@states.9"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" implicitTransitionsFrom="//@describes/@states.9" implicitTransitionTo="//@describes/@states.3"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="humanWin==false" implicitTransitionsFrom="//@describes/@states.3" implicitTransitionTo="//@describes/@states.10"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" delay="3000" implicitTransitionsFrom="//@describes/@states.10" implicitTransitionTo="//@describes/@states.11"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" delay="3000" implicitTransitionsFrom="//@describes/@states.11" implicitTransitionTo="//@describes/@states.2"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" implicitTransitionsFrom="//@describes/@states.0" implicitTransitionTo="//@describes/@states.1"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="robotWin==true" implicitTransitionsFrom="//@describes/@states.12" implicitTransitionTo="//@describes/@states.6"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="humanWin==true" implicitTransitionsFrom="//@describes/@states.3" implicitTransitionTo="//@describes/@states.7"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="//" implicitTransitionsFrom="//@describes/@states.1" implicitTransitionTo="//@describes/@states.2"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="robotWin==false" implicitTransitionsFrom="//@describes/@states.12" implicitTransitionTo="//@describes/@states.4"/>
    <events xsi:type="stateMachine:ImplicitEvent" implicitTransitionsFrom="//@describes/@states.13" implicitTransitionTo="//@describes/@states.5"/>
    <events xsi:type="stateMachine:ImplicitEvent" trigger="colore==CheckersConstants.WHITE &amp;&amp; searchTo==true" implicitTransitionsFrom="//@describes/@states.8" implicitTransitionTo="//@describes/@states.5"/>
    <states xsi:type="stateMachine:StartState" implicitTransition="//@describes/@events.10"/>
    <states xsi:type="stateMachine:State" name="Calibration" implicitTransition="//@describes/@events.13" do="navigator.calibrate();" exit="arm.up();" entry="arm.down();"/>
    <states xsi:type="stateMachine:State" name="Home" transitionsFrom="//@describes/@events.2" do="try{navigator.goHome();}catch(Exception e){}"/>
    <states xsi:type="stateMachine:State" name="Think" implicitTransition="//@describes/@events.7 //@describes/@events.12" do=" Engine.MiniMax(board.getArrayBoard(), 0, depth, result,pieceRobot, new int[1]); try{nextMove = Move.fromArray(result);}catch(cantMoveException e){humanWin=true;}" exit="from=nextMove.getFrom(); to=nextMove.getTo();" entry="">
      <variables name="result" type="int[]" initialValue="new int[4];"/>
      <variables name="nextMove" type="Move" initialValue="null"/>
    </states>
    <states xsi:type="stateMachine:State" name="GuessMoveFrom" implicitTransition="//@describes/@events.4" do="try{navigator.goTo(from);}catch(Exception e){}" entry="from = board.getPossibleMoveFrom();"/>
    <states xsi:type="stateMachine:State" name="GuessMoveTo" implicitTransition="//@describes/@events.3" do="try{navigator.goTo(to[to.length-1]);}catch(Exception e){}" entry="to = board.getPossibleMoveTo();"/>
    <states xsi:type="stateMachine:State" name="RobotWins" do="System.out.println(&quot;White wins&quot;);"/>
    <states xsi:type="stateMachine:State" name="HumanWins" do="System.out.println(&quot;Black wins&quot;);"/>
    <states xsi:type="stateMachine:State" name="SensorRead" implicitTransition="//@describes/@events.0 //@describes/@events.1 //@describes/@events.5 //@describes/@events.16" do="colore=CS.getColorNumber();" exit="arm.up();" entry="arm.down();"/>
    <states xsi:type="stateMachine:State" name="UpdateBoard" implicitTransition="//@describes/@events.6" do="board.makeMove(new Move(from,to));"/>
    <states xsi:type="stateMachine:State" name="ShowFrom" implicitTransition="//@describes/@events.8" do="arm.down();" exit="arm.up();" entry="try{navigator.goTo(from);}catch(Exception e){}"/>
    <states xsi:type="stateMachine:State" name="ShowTo" implicitTransition="//@describes/@events.9" do="arm.down();" exit="arm.up();" entry="try{navigator.goTo(to[to.length-1]);}catch(Exception e){}"/>
    <states xsi:type="stateMachine:State" name="CalculateMoves" implicitTransition="//@describes/@events.14 //@describes/@events.11" do="try{board.getPossibleMoves(piecehuman);&#x9;} catch (cantMoveException e) {robotWin=true;}" exit="searchFrom=true;"/>
    <states xsi:type="stateMachine:State" name="CalculateTo" implicitTransition="//@describes/@events.15" exit="" entry="searchFrom=false; searchTo=true;"/>
  </describes>
</stateMachine:Diagram>
